"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
const Errors_1 = require("../../util/Errors");
class RegularFunction {
    constructor(operator, definition) {
        this.operator = operator;
        this.functionClass = 'regular';
        this.arity = definition.arity;
        this.overloadMap = definition.overloads;
    }
    apply(args) {
        const func = this._monomorph(args);
        if (!func) {
            throw new Errors_1.InvalidArgumentTypes(args, this.operator);
        }
        return func(args);
    }
    // TODO: Clean up a bit
    _monomorph(args) {
        // tslint:disable-next-line:no-any
        const argTypes = immutable_1.List(args.map((a) => a.type || a.termType));
        const arity = args.length;
        return this.overloadMap.get(argTypes)
            || this.overloadMap.get(immutable_1.List(args.map((a) => a.termType)))
            || this.overloadMap.get(immutable_1.List(Array(arity).fill('term')));
    }
}
exports.RegularFunction = RegularFunction;
// Special Functions ----------------------------------------------------------
/*
 * Special Functions are those that don't really fit in sensible categories and
 * have extremely heterogeneous signatures that make them impossible to abstract
 * over. They are small in number, and their behaviour is often complex and open
 * for multiple correct implementations with different trade-offs.
 *
 * Due to their varying nature, they need all available information present
 * during evaluation. This reflects in the signature of the apply() method.
 *
 * They need access to an evaluator to be able to even implement their logic.
 * Especially relevant for IF, and the logical connectives.
 *
 * They can have both sync and async implementations, and both would make sense
 * in some contexts.
 */
class SpecialFunctionAsync {
    constructor() {
        this.functionClass = 'special';
    }
}
exports.SpecialFunctionAsync = SpecialFunctionAsync;
//# sourceMappingURL=types.js.map